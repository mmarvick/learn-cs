; helpers
(define (for-each-except exception procedure list)
  (cond ((null? list) 'done)
        ((eq? (car list) exception)
          (for-each-except exception procedure (cdr list)))
        (else
          (procedure (car list))
          (for-each-except exception procedure (cdr list)))))

; connectors
(define (make-connector)
  (let ((value false)
        (informant false)
        (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
                (set! value newval)
                (set! informant setter)
                (for-each-except setter
                                 inform-about-value
                                 constraints))
            ((not (= value newval))
                (error "Contradiction" (list value newval)))
            (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant false)
                 (for-each-except retractor
                                  inform-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    (define (me-has-value?)
      (if informant true false))
    (define (get-my-value) value)
    (define (me request)
      (cond ((eq? request 'has-value?) me-has-value?)
            ((eq? request 'value) get-my-value)
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'connect) connect)
            (else (error "Unknown operation -- CONNECTOR" request))))
    me))

(define (has-value? connector)
  ((connector 'has-value?)))
(define (get-value connector)
  ((connector 'value)))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))

; constraints: add, multiply, constant, probe
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-no-value constraint)
  (constraint 'I-lost-my-value))

(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
            (set-value! sum
                        (+ (get-value a1) (get-value a2))
                        me))
          ((and (has-value? sum) (has-value? a1))
            (set-value! a2
                        (- (get-value sum) (get-value a1))
                        me))
          ((and (has-value? sum) (has-value? a2))
            (set-value! a1
                        (- (get-value sum) (get-value a2))
                        me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unknown request -- ADDER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((and (has-value? m1) (has-value? m2))
            (set-value! product
                        (* (get-value m1) (get-value m2))
                        me))
          ((and (has-value? product) (has-value? m1))
            (set-value! m2
                        (/ (get-value product) (get-value m1))
                        me))
          ((and (has-value? product) (has-value? m2))
            (set-value! m1
                        (/ (get-value product) (get-value m2))
                        me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unknown request -- PRODUCT" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define (constant value connector)
  (define (me request)
    (error "Unknown request -- CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)
  me)

(define (probe name connector)
  (define (print-probe value)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value)
    (newline))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unkonwn request -- PROBE" request))))
  (connect connector me)
  me)

; converter
(define (celsius-fahrenheit-converter c f)
  (let ((e (make-connector))
        (cm (make-connector))
        (fm1 (make-connector))
        (fm2 (make-connector))
        (fa (make-connector)))
    (multiplier c cm e)
    (multiplier fm1 fm2 e)
    (adder fa fm1 f)
    (constant 9 cm)
    (constant 5 fm2)
    (constant 32 fa)
    'ok))

; (define C (make-connector))
; (define F (make-connector))
; (celsius-fahrenheit-converter C F)
; (probe "Celsius temp   " C)
; (probe "Fahrenheit temp" F)

; (set-value! C 25 'user)
; (forget-value! C 'user)
; (set-value! F 212 'user)
