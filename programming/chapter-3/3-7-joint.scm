(define (make-raw-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
                balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request " m))))
  dispatch)

(define (make-secured-account account password)
  (define (invalid-pass . args)
    "Incorrect password")
  (define (dispatch p m)
    (cond ((not (eq? p password)) invalid-pass)
          ((eq? m 'get-raw-account) (lambda args account))
          (else (account m))))
  dispatch)

(define (make-account password balance)
  (make-secured-account
    (make-raw-account balance)
    password))

(define (make-joint account old-pass new-pass)
  (make-secured-account
    ((account old-pass 'get-raw-account))
    new-pass))

(let* ((paul-account (make-account 'my-pass 100))
       (piel-account (make-joint paul-account 'my-pass 'new-pass))
       (mike-account (make-account 'mike-pass 1000)))
  (display ((paul-account 'my-pass 'withdraw) 25))(newline)
  (display ((paul-account 'new-pass 'withdraw) 25))(newline)
  (display ((piel-account 'my-pass 'withdraw) 25))(newline)
  (display ((piel-account 'new-pass 'withdraw) 25))(newline)
  (display ((mike-account 'my-pass 'withdraw) 25))(newline)
  (display ((mike-account 'new-pass 'withdraw) 25))(newline)
  (display ((mike-account 'mike-pass 'withdraw) 25))(newline))