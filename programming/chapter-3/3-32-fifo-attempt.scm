(define nil '())

; define queue
(define (make-queue)
  (let ((front-ptr nil)
        (rear-ptr nil))
    (define (print-queue) front-ptr)
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (insert-queue! x)
      (let ((queue-item (list x)))
        (if (empty-queue?)
          (begin
            (set! front-ptr queue-item)
            (set! rear-ptr queue-item))
          (begin
            (set-cdr! rear-ptr queue-item)
            (set! rear-ptr queue-item)))))
    (define (delete-queue!)
      (if (empty-queue?)
        (error "DELETE called with an empty queue")
        (set! front-ptr (cdr front-ptr))))
    (define (dispatch m)
      (cond ((eq? m 'print-queue) print-queue)
            ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            (else (error "Invalid queue message " m))))
    dispatch))

(define (print-queue q)
  ((q 'print-queue)))

(define (empty-queue? q)
  ((q 'empty-queue?)))

(define (front-queue q)
  ((q 'front-queue)))

(define (insert-queue! q x)
  ((q 'insert-queue!) x)
  q)

(define (delete-queue! q)
  ((q 'delete-queue!))
  q)

; define time segment
(define (make-time-segment time queue)
  (cons time queue))

(define (segment-time s) (car s))
(define (segment-queue s) (cdr s))

; define agenda
(define (make-agenda) (list 0))
(define (current-time agenda) (car agenda))
(define (set-current-time! agenda time) (set-car! agenda time))
(define (segments agenda) (cdr agenda))
(define (set-segments! agenda segments) (set-cdr! agenda segments))
(define (frist-segment agenda) (car (segments agenda)))
(define (rest-segments agenda) (cdr (segments agenda)))
(define (empty-agenda? agenda) (null? (segments agenda)))
(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
    (or (null? segments)
        (< time (segment-time (car segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-queue)))
      (insert-queue! q action)
      (make-time-segment time q)))
  (define (add-to-segments! segments)
    (if (= (segment-time (car segments)) time)
        (insert-queue! (segment-queue (car segments)) action)
        (let ((rest (cdr segments)))
          (if (belongs-before? rest)
              (set-cdr! segments
                (cons (make-new-time-segment time action)
                      (cdr segments)))
              (add-to-segments! rest)))))
  (let ((segments (segments agenda)))
    (if (belongs-before? segments)
        (set-segments! agenda (cons (make-new-time-segment time action) segments))
        (add-to-segments! segments))))
(define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue (first-segment agenda))))
    (delete-queue! q)
    (if (empty-queue? q)
      (set-segments! agenda (rest-segments agenda)))))
(define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
      (error "Agenda is empty")
      (let ((first-seg (first-segment agenda)))
        (set-current-time! agenda (segment-time first-seg))
        (front-queue (segment-queue first-seg)))))

; singleton agenda
(define agenda (make-agenda))
(define (after-delay delay action)
  (add-to-agenda! (+ delay ()))

; define wires
(define (make-wire)
  (let ((signal-value 0) (action-procedures nil))
    (define (set-my-signal! new-value)
      (define (call-each procedures)
        (if (null? procedures)
            'done
            (begin
              ((car procedures))
              (call-each (cdr procedures)))))
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))

    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error "Unknown operation " m))))
    dispatch))

(define (get-signal wire)
  (wire 'get-signal))

(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))

(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))

; define primitive types
(define (inverter input output)
  (define (logical-not s)
    (cond ((= s 0) 1)
          ((= s 1) 0)
          (else (error "Invalid signal " s))))
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
        (lambda ()
          (set-signal! output new-value)))))
  (add-action! input invert-input))

(define (and-gate a1 a2 output)
  (define (logical-and s1 s2)
    (cond ((= s1 0) 0)
          ((= s2 0) 0)
          (else 0)))
  (define (and-action-procedure)
    (let ((new-value (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
        (lambda ()
          (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)

(define (or-gate o1 o2 output)
  (define (logical-or s1 s2)
    (cond ((= s1 1) 1)
          ((= s2 1) 1)
          (else 0)))
  (define (or-action-procedure)
    (let ((new-value (logical-or (get-signal o1) (get-signal o2))))
      (after-delay or-gate-delay
        (lambda ()
          (set-signal! output new-value)))))
  (add-action! o1 or-action-procedure)
  (add-action! o2 or-action-procedure)
  'ok)

; define compound types
(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((c1 (make-wire)) (c2 (make-wire)) (s2 (make-wire)))
    (half-adder b c s2 c2)
    (half-adder a s2 sum c1)
    (or-gate c1 s2 c-out)
    'ok))