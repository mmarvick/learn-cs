(define nil '())

(define (make-queue)
  (let ((front-ptr nil)
        (rear-ptr nil))
    (define (print-queue) front-ptr)
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (insert-queue! x)
      (let ((queue-item (list x)))
        (if (empty-queue?)
          (begin
            (set! front-ptr queue-item)
            (set! rear-ptr queue-item))
          (begin
            (set-cdr! rear-ptr queue-item)
            (set! rear-ptr queue-item)))))
    (define (delete-queue!)
      (if (empty-queue?)
        (error "DELETE called with an empty queue")
        (set! front-ptr (cdr front-ptr))))
    (define (dispatch m)
      (cond ((eq? m 'print-queue) print-queue)
            ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            (else (error "Invalid queue message " m))))
    dispatch))

(define (print-queue q)
  ((q 'print-queue)))

(define (empty-queue? q)
  ((q 'empty-queue?)))

(define (front-queue q)
  ((q 'front-queue)))

(define (insert-queue! q x)
  ((q 'insert-queue!) x)
  q)

(define (delete-queue! q)
  ((q 'delete-queue!))
  q)

(define q (make-queue))
(display (empty-queue? q))(newline)
(display (print-queue (insert-queue! q 'a)))(newline)
(display (front-queue q))(newline)
(display (empty-queue? q))(newline)
(display (print-queue (insert-queue! q 'b)))(newline)
(display (front-queue q))(newline)
(display (print-queue (delete-queue! q)))(newline)
(display (print-queue (insert-queue! q 'c)))(newline)
(display (print-queue (insert-queue! q 'd)))(newline)
(display (front-queue q))(newline)
(display (print-queue (delete-queue! q)))(newline)
(display (print-queue (delete-queue! q)))(newline)
(display (empty-queue? q))(newline)
(display (print-queue (delete-queue! q)))(newline)
(display (empty-queue? q))(newline)