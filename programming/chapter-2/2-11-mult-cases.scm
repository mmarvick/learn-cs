(define (make-interval a b) (cons a b))
(define (lower-bound i) (car i))
(define (upper-bound i) (cdr i))
(define (print-interval i)
    (display "(")
    (display (lower-bound i))
    (display ", ")
    (display (upper-bound i))
    (display ")")
    (newline))

(define (positive-pair? a) (and (<= 0 (lower-bound a)) (< 0 (upper-bound a))))
(define (negative-pair? a) (and (> 0 (lower-bound a)) (>= 0 (upper-bound a))))

(define (mul-interval-old a b)
    (let ((p1 (* (lower-bound a) (lower-bound b)))
          (p2 (* (lower-bound a) (upper-bound b)))
          (p3 (* (upper-bound a) (lower-bound b)))
          (p4 (* (upper-bound a) (upper-bound b))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (mul-interval a b)
    (let ((a-low (lower-bound a))
          (b-low (lower-bound b))
          (a-high (upper-bound a))
          (b-high (upper-bound b)))
            (cond ((positive-pair? a)
                    (cond ((positive-pair? b)
                                (make-interval (* a-low b-low) (* a-high b-high)))
                        ((negative-pair? b)
                                (make-interval (* a-high b-low) (* a-low b-high)))
                        (else
                                (make-interval (* a-high b-low) (* a-high b-high)))))
                  ((negative-pair? a)
                    (cond ((positive-pair? b)
                                (make-interval (* a-low b-high) (* a-high b-low)))
                          ((negative-pair? b)
                                (make-interval (* a-high b-high) (* a-low b-low)))
                          (else
                                (make-interval (* a-low b-high) (* a-low b-low)))))
                  (else
                    (cond ((positive-pair? b)
                                (make-interval (* a-low b-high) (* a-high b-high)))
                          ((negative-pair? b)
                                (make-interval (* a-high b-low) (* a-low b-low)))
                          (else (mul-interval-old a b)))))))

(define (mul-test a b)
    (display "TEST CASE") (newline)
    (display "p1:  ") (print-interval a)
    (display "p2:  ") (print-interval b)
    (display "mul-new: ") (print-interval (mul-interval a b))
    (display "mul-old: ") (print-interval (mul-interval a b)) (newline))

(mul-test (make-interval -3 -3) (make-interval -3 -2))
(mul-test (make-interval -3 -2) (make-interval -3 -2))
(mul-test (make-interval -3 0) (make-interval -3 -2))
(mul-test (make-interval -3 2) (make-interval -3 -2))
(mul-test (make-interval 0 2) (make-interval -3 -2))
(mul-test (make-interval 2 3) (make-interval -3 -2))
(mul-test (make-interval 3 3) (make-interval -3 -2))

(mul-test (make-interval -3 -3) (make-interval -5 5))
(mul-test (make-interval -3 -2) (make-interval -5 5))
(mul-test (make-interval -3 0) (make-interval -5 5))
(mul-test (make-interval -3 2) (make-interval -5 5))
(mul-test (make-interval 0 2) (make-interval -5 5))
(mul-test (make-interval 2 3) (make-interval -5 5))
(mul-test (make-interval 3 3) (make-interval -5 5))

(mul-test (make-interval -3 -3) (make-interval 6 8))
(mul-test (make-interval -3 -2) (make-interval 6 8))
(mul-test (make-interval -3 0) (make-interval 6 8))
(mul-test (make-interval -3 2) (make-interval 6 8))
(mul-test (make-interval 0 2) (make-interval 6 8))
(mul-test (make-interval 2 3) (make-interval 6 8))
(mul-test (make-interval 3 3) (make-interval 6 8))
