(define set1 '(1 2 3 4))
(define set2 '(2 4 6 7))

(define (element-of-set? x set)
    (cond ((null? set) false)
          ((= x (car set)) true)
          ((< x (car set)) false)
          (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
    (cond ((null? set)
            (list x))
          ((= x (car set))
            set)
          ((< x (car set))
            (cons x set))
          ((> x (car set))
            (cons (car set) (adjoin-set x (cdr set))))))

(define (intersect-set s1 s2)
    (if (or (null? s1) (null? s2))
        '()
        (let ((x1 (car s1))
              (x2 (car s2)))
            (cond ((= x1 x2)
                        (cons x1
                              (intersect-set (cdr s1) (cdr s2))))
                   ((< x1 x2)
                        (intersect-set (cdr s1) s2))
                   ((< x2 x1)
                        (intersect-set s1 (cdr s2)))))))

(define (union-set s1 s2)
    (cond ((null? s1) s2)
          ((null? s2) s1)
          (else (let ((x1 (car s1)) (x2 (car s2)))
            (cond ((= x1 x2)
                    (cons x1 (union-set (cdr s1) (cdr s2))))
                  ((< x1 x2)
                    (cons x1 (union-set (cdr s1) s2)))
                  ((> x1 x2)
                    (cons x2 (union-set s1 (cdr s2)))))))))

(display (element-of-set? 3 set1))(newline)
(display (element-of-set? 5 set1))(newline)
(display (element-of-set? 1.5 set1))(newline)
(display (adjoin-set 5 '()))(newline)
(display (adjoin-set 0 set1))(newline)
(display (adjoin-set 2 set1))(newline)
(display (adjoin-set 2.5 set1))(newline)
(display (adjoin-set 8 set1))(newline)
(display (intersect-set set1 set2))(newline)
(display (union-set set1 set2))(newline)
(display (union-set (list 1 3 5 7) (list 2 4 6 8 10)))(newline)
