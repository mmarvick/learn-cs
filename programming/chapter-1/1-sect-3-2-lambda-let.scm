(define square (lambda (x) (* x x)))

(define (calculate-helper x y)
    (define (helper a b)
        (+ (* x (square a))
            (* y b)
            (* a b)))
    (helper (+ 1 (* x y)) (- 1 y)))

(define (calculate-lambda x y)
    ((lambda (a b)
        (+ (* x (square a))
            (* y b)
            (* a b))) (+ 1 (* x y)) (- 1 y)))

(define (calculate-let x y)
    (let (
        (a (+ 1 (* x y)))
        (b (- 1 y)))
    (+ (* x (square a))
            (* y b)
            (* a b))))

(define (calculate-let-nest x y)
    (let ((a (+ 1 (* x y)))
          (b (- 1 y)))
        (let ((term1 (* x (square a)))
              (term2 (* y b))
              (term3 (* a b)))
                (+ term1 term2 term3))))

(define (calculate-lambda-nest x y)
    ((lambda (a b)
        ((lambda (term1 term2 term3) (+ term1 term2 term3))
            (* x (square a))
            (* y b)
            (* a b)))
        (+ 1 (* x y))
        (- 1 y)))

(define (calculate-loop calculator name)
    (display name) (newline)
    (display (calculator 1 1)) (newline)
    (display (calculator 1 3)) (newline)
    (display (calculator 1 12)) (newline)
    (display (calculator 3 3)) (newline)
    (display (calculator 4 7)) (newline)
    (display (calculator 2 -8)) (newline)
)

(calculate-loop calculate-helper "calculate-helper")
(calculate-loop calculate-lambda "calculate-lambda")
(calculate-loop calculate-let "calculate-let")
(calculate-loop calculate-let-nest "calculate-let-nest")
(calculate-loop calculate-lambda-nest "calculate-lambda-nest")
